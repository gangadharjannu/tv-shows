{"version":3,"sources":["assets/images/RTL_Nederland.svg","utils/date-utils.js","components/episodes/Episodes.jsx","components/go-back/GoBack.jsx","components/episode/Episode.jsx","utils/constants.js","utils/api-endpoints.js","components/show/Show.jsx","hooks/useFetch.js","App.jsx","serviceWorker.js","index.jsx"],"names":["module","exports","formatDay","dateString","Date","toLocaleDateString","day","month","year","replace","Episodes","list","url","useRouteMatch","className","map","episode","key","id","season","number","airdate","to","name","defaultProps","GoBack","history","text","onClick","goBack","href","withRouter","Episode","data","src","image","medium","alt","dangerouslySetInnerHTML","__html","summary","errorKeys","showUrl","Show","path","initialUrl","useState","setUrl","isLoading","response","error","fetchData","setFetchData","useEffect","isCancelled","a","fetch","json","hasError","errorKey","getData","useFetch","fetchShow","show","loading","showState","setShowState","prevRes","showContent","_embedded","episodes","exact","render","props","find","String","match","params","episodeId","App","basename","RTLIcon","Boolean","window","location","hostname","ReactDOM","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console","message"],"mappings":"8FAAAA,EAAOC,QAAU,IAA0B,2C,mRCY5BC,MAZf,SAAmBC,GASjB,OARa,IAAIC,KAAKD,GAEnBE,mBAAmB,QAAS,CAC3BC,IAAK,UACLC,MAAO,QACPC,KAAM,YAEPC,QAAQ,KAAM,M,MCAnB,SAASC,EAAT,GAA6B,IAATC,EAAQ,EAARA,KACZC,EAAQC,cAARD,IAEN,OACE,yBAAKE,UAAU,kBACb,wCACA,yBAAKA,UAAU,SACb,yBAAKA,UAAU,eACb,yBAAKA,UAAU,UAAf,kBACA,yBAAKA,UAAU,UAAf,QACA,yBAAKA,UAAU,UAAf,UAGHH,EAAKI,KAAI,SAACC,GAAD,OACR,yBAAKF,UAAU,MAAMG,IAAKD,EAAQE,IAChC,yBAAKJ,UAAU,UAAf,WAA6BE,EAAQG,OAArC,aAAgDH,EAAQI,SACxD,yBAAKN,UAAU,UAAUZ,EAAUc,EAAQK,UAC3C,yBAAKP,UAAU,UACb,kBAAC,IAAD,CAAMQ,GAAE,UAAKV,EAAL,qBAAqBI,EAAQE,KAAOF,EAAQO,YAYhEb,EAASc,aAAe,CACtBb,KAAM,IAGOD,QCnCTe,G,MAAS,SAAC,GAAD,IAAGC,EAAH,EAAGA,QAASC,EAAZ,EAAYA,KAAZ,OACb,uBAAGb,UAAU,UAAUc,QAAS,kBAAMF,EAAQG,UAAUC,KAAK,IAC1DH,KASLF,EAAOD,aAAe,CACpBE,QAAS,GACTC,KAAM,WAGOI,kBAAWN,G,MCjB1B,SAASO,EAAT,GAA4B,IAATC,EAAQ,EAARA,KACjB,OACE,kBAAC,WAAD,KACE,kBAAC,EAAD,CAAQN,KAAK,oBACb,yBAAKb,UAAU,WACb,4BAAKmB,EAAKV,MACV,yBACEW,IAAKD,EAAKE,MAAMC,OAChBC,IAAKJ,EAAKV,KACVT,UAAU,mBAEZ,uBAAGwB,wBAAyB,CAAEC,OAAQN,EAAKO,aAUnDR,EAAQR,aAAe,CACrBS,KAAM,IAGOD,Q,yBC/BFS,EACK,gBCDlB,IAKaC,EAAO,UALL,mBAKK,8B,MCuELC,MAhEf,WAAiB,IACTC,EAAS/B,cAAT+B,KADQ,ECOD,SAAkBC,GAAa,IAAD,EACrBC,mBAASD,GADY,mBACpCjC,EADoC,KAC/BmC,EAD+B,OAETD,mBAAS,CACzCE,WAAW,EACXC,SAAU,KACVC,MAAO,OALkC,mBAEpCC,EAFoC,KAEzBC,EAFyB,KA6C3C,OArCAC,qBAAU,WAER,IAAIC,GAAc,EA8BlB,OAJI1C,GAxBS,uCAAG,gCAAA2C,EAAA,yDACTD,EADS,wBAEZF,EAAa,CAAEJ,WAAW,EAAMC,SAAU,KAAMC,MAAO,OAF3C,kBAKaM,MAAM5C,GALnB,cAKJqC,EALI,gBAMSA,EAASQ,OANlB,OAMJxB,EANI,OASVmB,EAAa,CACXJ,WAAW,EACXC,UAJIS,GAAYzB,GAIa,KAAPA,EACtBiB,MAAOQ,EAAWzB,EAAO,OAZjB,kDAeVmB,EAAa,CACXJ,WAAW,EACXC,SAAU,KACVC,MAAO,CAAES,SAAUlB,KAlBX,0DAAH,oDAyBXmB,CAAQhD,GAGH,WACL0C,GAAc,KAEf,CAAC1C,IAEG,CAACuC,EAAWJ,GDlDCc,CAASnB,GAAtBoB,EAFO,sBAGoBhB,mBAAS,CACzCiB,KAAM,GACNC,SAAS,IALG,mBAGPC,EAHO,KAGIC,EAHJ,KAOdb,qBAAU,WAAO,IACPJ,EAAaa,EAAbb,SACJA,GACFiB,GAAa,SAACC,GAAD,mBAAC,eACTA,GADQ,IAEXJ,KAAMd,EACNe,SAAS,SAGZ,CAACF,IAhBU,IAkBNC,EAAkBE,EAAlBF,KAEFK,EAFoBH,EAAZD,QAGZ,UAEA,6BAASlD,UAAU,QACjB,kBAAC,EAAD,CAAQa,KAAK,qBACb,wBAAIb,UAAU,eAAeiD,EAAKxC,MAClC,yBAAKT,UAAU,iBACb,+BACE,4BAAQA,UAAU,oBAChB,yBACEoB,IAAK6B,EAAK5B,MAAMC,OAChBC,IAAI,YACJvB,UAAU,kBAIhB,6BACEA,UAAU,6BACVwB,wBAAyB,CAAEC,OAAQwB,EAAKvB,WAE1C,kBAAC,EAAD,CAAU7B,KAAMoD,EAAKM,UAAUC,aAIrC,OACE,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOC,OAAK,EAAC3B,KAAMA,GAChBwB,GAEH,kBAAC,IAAD,CACExB,KAAI,UAAKA,EAAL,wBACJ4B,OAAQ,SAACC,GACP,IAAMxC,EAAO8B,EAAKM,UAAUC,SAASI,MAGnC,gBAAGxD,EAAH,EAAGA,GAAH,OAAYyD,OAAOzD,KAAQuD,EAAMG,MAAMC,OAAOC,aAEhD,OAAO,kBAAC,EAAD,eAAS7C,KAAMA,GAAUwC,S,uBExB3BM,MArCf,WASE,OACE,kBAAC,IAAD,CAAQC,SAAS,KACf,kBAAC,WAAD,KACE,wBAAIlE,UAAU,UACZ,kBAAC,IAAD,CAAMQ,GAAG,KACP,yBAAKY,IAAK+C,IAAS5C,IAAI,MAAMvB,UAAU,mBAI3C,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAO8B,KAAK,yBACV,kBAAC,EAAD,OAEF,kBAAC,IAAD,CAAOA,KAAK,KACV,yBAAK9B,UAAU,SArBX,CACZ,CAAEI,GAAI,YAAaK,KAAM,uBACzB,CAAEL,GAAI,eAAgBK,KAAM,8BAC5B,CAAEL,GAAI,gBAAiBK,KAAM,iBAC7B,CAAEL,GAAI,cAAeK,KAAM,kBAkBVR,KAAI,gBAAGG,EAAH,EAAGA,GAAIK,EAAP,EAAOA,KAAP,OACT,kBAAC,IAAD,CAAMN,IAAKC,EAAII,GAAE,wBAAmBJ,GAAMJ,UAAU,QACjDS,YCtBC2D,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAAST,MACvB,2DCZNU,IAASd,OACP,kBAAC,IAAMe,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAACC,GACLA,EAAaC,gBAEdC,OAAM,SAAC9C,GACN+C,QAAQ/C,MAAMA,EAAMgD,c","file":"static/js/main.7ba5cdad.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/RTL_Nederland.7f4f7f3c.svg\";","function formatDay(dateString) {\n  const date = new Date(dateString);\n  const formattedDate = date\n    .toLocaleDateString('en-GB', {\n      day: '2-digit',\n      month: 'short',\n      year: 'numeric',\n    })\n    .replace(/ /g, '-');\n  return formattedDate;\n}\n\nexport default formatDay;\n","import React from 'react';\nimport { Link, useRouteMatch } from 'react-router-dom';\nimport { array } from 'prop-types';\n\nimport formatDay from '../../utils/date-utils';\n\nimport './Episodes.scss';\n\nfunction Episodes({ list }) {\n  let { url } = useRouteMatch();\n\n  return (\n    <div className=\"episodes__list\">\n      <h1>Episodes</h1>\n      <div className=\"table\">\n        <div className=\"heading row\">\n          <div className=\"column\">Season/Episode</div>\n          <div className=\"column\">Date</div>\n          <div className=\"column\">Name</div>\n        </div>\n      </div>\n      {list.map((episode) => (\n        <div className=\"row\" key={episode.id}>\n          <div className=\"column\">{`S${episode.season} E${episode.number}`}</div>\n          <div className=\"column\">{formatDay(episode.airdate)}</div>\n          <div className=\"column\">\n            <Link to={`${url}/episodes/${episode.id}`}>{episode.name}</Link>\n          </div>\n        </div>\n      ))}\n    </div>\n  );\n}\n\nEpisodes.propTypes = {\n  list: array,\n};\n\nEpisodes.defaultProps = {\n  list: [],\n};\n\nexport default Episodes;\n","import React from 'react';\nimport { withRouter } from 'react-router-dom';\n\nimport { object, string } from 'prop-types';\n\nimport './GoBack.scss';\n\nconst GoBack = ({ history, text }) => (\n  <a className=\"go-back\" onClick={() => history.goBack()} href=\"\">\n    {text}\n  </a>\n);\n\nGoBack.propTypes = {\n  history: object,\n  text: string,\n};\n\nGoBack.defaultProps = {\n  history: {},\n  text: 'Go back',\n};\n\nexport default withRouter(GoBack);\n","import React, { Fragment } from 'react';\nimport { object } from 'prop-types';\n\nimport GoBack from '../go-back/GoBack';\n\nimport './Episode.scss';\nfunction Episode({ data }) {\n  return (\n    <Fragment>\n      <GoBack text=\"Go back to show\" />\n      <div className=\"episode\">\n        <h1>{data.name}</h1>\n        <img\n          src={data.image.medium}\n          alt={data.name}\n          className=\"episode__image\"\n        />\n        <p dangerouslySetInnerHTML={{ __html: data.summary }}></p>\n      </div>\n    </Fragment>\n  );\n}\n\nEpisode.propTypes = {\n  data: object,\n};\n\nEpisode.defaultProps = {\n  data: [],\n};\n\nexport default Episode;\n","export const errorKeys = {\n  INTERNAL_ERROR: 'internalError',\n};\n","const origin = '//api.tvmaze.com';\n\n// embed episodes, can be changed to load on demand but we are loading very less information\n// for a given show so we can track the user's behavior and decide whether to load episodes\n// on demand or embedded.\nexport const showUrl = `${origin}/shows/1955?embed=episodes`;\n","import React, { useState, useEffect } from 'react';\nimport { Route, useRouteMatch, Switch } from 'react-router-dom';\n\nimport Episodes from '../episodes/Episodes';\nimport Episode from '../episode/Episode';\nimport GoBack from '../go-back/GoBack';\n\nimport useFetch from '../../hooks/useFetch';\nimport { showUrl } from '../../utils/api-endpoints';\n\nimport './Show.scss';\n\nfunction Show() {\n  let { path } = useRouteMatch();\n  const [fetchShow] = useFetch(showUrl);\n  const [showState, setShowState] = useState({\n    show: [],\n    loading: true,\n  });\n  useEffect(() => {\n    const { response } = fetchShow;\n    if (response) {\n      setShowState((prevRes) => ({\n        ...prevRes,\n        show: response,\n        loading: false,\n      }));\n    }\n  }, [fetchShow]);\n\n  const { show, loading } = showState;\n\n  const showContent = loading ? (\n    'loading'\n  ) : (\n    <section className=\"show\">\n      <GoBack text=\"Go back to shows\" />\n      <h1 className=\"show__title\">{show.name}</h1>\n      <div className=\"show__content\">\n        <aside>\n          <figure className=\"image__container\">\n            <img\n              src={show.image.medium}\n              alt=\"show name\"\n              className=\"show__image\"\n            />\n          </figure>\n        </aside>\n        <article\n          className=\"show__description clearfix\"\n          dangerouslySetInnerHTML={{ __html: show.summary }}\n        />\n        <Episodes list={show._embedded.episodes} />\n      </div>\n    </section>\n  );\n  return (\n    <Switch>\n      <Route exact path={path}>\n        {showContent}\n      </Route>\n      <Route\n        path={`${path}/episodes/:episodeId`}\n        render={(props) => {\n          const data = show._embedded.episodes.find(\n            // We should convert id to string because route params are string and episode id is number\n            // eslint-disable-next-line react/prop-types\n            ({ id }) => String(id) === props.match.params.episodeId\n          );\n          return <Episode data={data} {...props} />;\n        }}\n      ></Route>\n    </Switch>\n  );\n}\n\nexport default Show;\n","import { useState, useEffect } from 'react';\n\nimport { errorKeys } from '../utils/constants';\n\n/**\n * This hook fetches the data based upon passed url.\n * @function useFetch\n * The passed url is managed in state url.\n * setUrl can be used to trigger a new call,\n * by updating the state variable url.\n *\n * The fetched data is managed in state fetchData, which includes\n * response - to manage successful response,\n * error - to handle error response,\n * isLoading - to indicate whether the call is on going.\n *\n * @param {string} initialUrl\n * @returns {object, function} fetchData, setUrl\n */\nexport default function useFetch(initialUrl) {\n  const [url, setUrl] = useState(initialUrl);\n  const [fetchData, setFetchData] = useState({\n    isLoading: false,\n    response: null,\n    error: null,\n  });\n\n  useEffect(() => {\n    // Prevent hooks call after component unmount (prevents memory leak)\n    let isCancelled = false;\n\n    const getData = async () => {\n      if (!isCancelled) {\n        setFetchData({ isLoading: true, response: null, error: null });\n\n        try {\n          const response = await fetch(url);\n          const data = await response.json();\n          const hasError = !data;\n\n          setFetchData({\n            isLoading: false,\n            response: !hasError ? data : null,\n            error: hasError ? data : null,\n          });\n        } catch (error) {\n          setFetchData({\n            isLoading: false,\n            response: null,\n            error: { errorKey: errorKeys.INTERNAL_ERROR },\n          });\n        }\n      }\n    };\n\n    if (url) {\n      getData(url);\n    }\n\n    return () => {\n      isCancelled = true;\n    };\n  }, [url]);\n\n  return [fetchData, setUrl];\n}\n","import React, { Fragment } from 'react';\nimport { BrowserRouter as Router, Switch, Route, Link } from 'react-router-dom';\n\nimport Show from './components/show/Show';\n\nimport RTLIcon from './assets/images/RTL_Nederland.svg';\nimport './App.scss';\n\nfunction App() {\n  // Can be obtained from API but hardcoded for brevity\n  const shows = [\n    { id: 'tt0175058', name: 'The Powerpuff Girls' },\n    { id: 'powerrangers', name: 'Power Rangers mystic force' },\n    { id: 'timonandpumba', name: 'Hakuna matata' },\n    { id: 'tomandjerry', name: 'Tom and Jerry' },\n  ];\n\n  return (\n    <Router basename=\"/\">\n      <Fragment>\n        <h1 className=\"header\">\n          <Link to=\"/\">\n            <img src={RTLIcon} alt=\"RTL\" className=\"header__logo\" />\n          </Link>\n        </h1>\n\n        <Switch>\n          <Route path=\"/show-details/:showId\">\n            <Show />\n          </Route>\n          <Route path=\"/\">\n            <div className=\"shows\">\n              {shows.map(({ id, name }) => (\n                <Link key={id} to={`/show-details/${id}`} className=\"show\">\n                  {name}\n                </Link>\n              ))}\n            </div>\n          </Route>\n        </Switch>\n      </Fragment>\n    </Router>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}